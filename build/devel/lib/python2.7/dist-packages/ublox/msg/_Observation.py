# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ublox/Observation.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import genpy
import std_msgs.msg

class Observation(genpy.Message):
  _md5sum = "6c7a4e3369ffffdbcc191cca0af79a8c"
  _type = "ublox/Observation"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """Header header

time time           # time of observation (UTC Time inc. Leap Seconds)
uint8 sat 		    # satellite number (within constellation)
uint8 gnssID	    # gnssID

uint8 GNSSID_GPS = 0
uint8 GNSSID_SBAS = 1
uint8 GNSSID_GALILEO = 2
uint8 GNSSID_BEIDOU = 3
uint8 GNSSID_QZSS = 5
uint8 GNSSID_GLONASS = 6

float64 freq        # carrier-phase frequency (GLONASS uses different frequency for each satellite)
uint32 locktime		# carrier-phase lock counter (max=64500ms)
float64 cno			# Carrier-to-noise density ratio (signal strength)[dB-Hz]

float64 L      		# carrier-phase (cycle)
float64 P      		# pseudorange (m)
float64 D      		# doppler frequency (Hz)
float64 stdevL  	# carrier-phase stddev (cycle)
float64 stdevP  	# psuedorange stddev (m)
float64 stdevD  	# doppler stddev (Hz)

uint8 LLI 			# Loss-of-Lock Indicator
uint8 LLI_LOST = 1
uint8 LLI_HALF_CYCLE_AMB = 2

uint8 code 			# code indicator
uint8 CODE_L1C = 1
uint8 BEIDOU_CODE_L1I = 2

uint8 signal 		# signal identifier
uint8 GPS_L1_CA = 1
uint8 GPS_L2_CL = 2
uint8 GPS_L2_CM = 3
uint8 GALILEO_E1_C = 4
uint8 GALILEO_E1_B = 5
uint8 GALILEO_E5_BI = 6
uint8 GALILEO_E5_BQ = 7
uint8 BEIDOU_B1I_D1 = 8
uint8 BEIDOU_B1I_D2 = 9
uint8 BEIDOU_B2I_D1 = 10
uint8 BEIDOU_B2I_D2 = 11
uint8 QZSS_L1_CA = 12
uint8 GLONASS_L1 = 13
uint8 GLONASS_L2 = 14

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id
"""
  # Pseudo-constants
  GNSSID_GPS = 0
  GNSSID_SBAS = 1
  GNSSID_GALILEO = 2
  GNSSID_BEIDOU = 3
  GNSSID_QZSS = 5
  GNSSID_GLONASS = 6
  LLI_LOST = 1
  LLI_HALF_CYCLE_AMB = 2
  CODE_L1C = 1
  BEIDOU_CODE_L1I = 2
  GPS_L1_CA = 1
  GPS_L2_CL = 2
  GPS_L2_CM = 3
  GALILEO_E1_C = 4
  GALILEO_E1_B = 5
  GALILEO_E5_BI = 6
  GALILEO_E5_BQ = 7
  BEIDOU_B1I_D1 = 8
  BEIDOU_B1I_D2 = 9
  BEIDOU_B2I_D1 = 10
  BEIDOU_B2I_D2 = 11
  QZSS_L1_CA = 12
  GLONASS_L1 = 13
  GLONASS_L2 = 14

  __slots__ = ['header','time','sat','gnssID','freq','locktime','cno','L','P','D','stdevL','stdevP','stdevD','LLI','code','signal']
  _slot_types = ['std_msgs/Header','time','uint8','uint8','float64','uint32','float64','float64','float64','float64','float64','float64','float64','uint8','uint8','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,time,sat,gnssID,freq,locktime,cno,L,P,D,stdevL,stdevP,stdevD,LLI,code,signal

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Observation, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.time is None:
        self.time = genpy.Time()
      if self.sat is None:
        self.sat = 0
      if self.gnssID is None:
        self.gnssID = 0
      if self.freq is None:
        self.freq = 0.
      if self.locktime is None:
        self.locktime = 0
      if self.cno is None:
        self.cno = 0.
      if self.L is None:
        self.L = 0.
      if self.P is None:
        self.P = 0.
      if self.D is None:
        self.D = 0.
      if self.stdevL is None:
        self.stdevL = 0.
      if self.stdevP is None:
        self.stdevP = 0.
      if self.stdevD is None:
        self.stdevD = 0.
      if self.LLI is None:
        self.LLI = 0
      if self.code is None:
        self.code = 0
      if self.signal is None:
        self.signal = 0
    else:
      self.header = std_msgs.msg.Header()
      self.time = genpy.Time()
      self.sat = 0
      self.gnssID = 0
      self.freq = 0.
      self.locktime = 0
      self.cno = 0.
      self.L = 0.
      self.P = 0.
      self.D = 0.
      self.stdevL = 0.
      self.stdevP = 0.
      self.stdevD = 0.
      self.LLI = 0
      self.code = 0
      self.signal = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_2I2BdI7d3B().pack(_x.time.secs, _x.time.nsecs, _x.sat, _x.gnssID, _x.freq, _x.locktime, _x.cno, _x.L, _x.P, _x.D, _x.stdevL, _x.stdevP, _x.stdevD, _x.LLI, _x.code, _x.signal))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.time is None:
        self.time = genpy.Time()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 81
      (_x.time.secs, _x.time.nsecs, _x.sat, _x.gnssID, _x.freq, _x.locktime, _x.cno, _x.L, _x.P, _x.D, _x.stdevL, _x.stdevP, _x.stdevD, _x.LLI, _x.code, _x.signal,) = _get_struct_2I2BdI7d3B().unpack(str[start:end])
      self.time.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_2I2BdI7d3B().pack(_x.time.secs, _x.time.nsecs, _x.sat, _x.gnssID, _x.freq, _x.locktime, _x.cno, _x.L, _x.P, _x.D, _x.stdevL, _x.stdevP, _x.stdevD, _x.LLI, _x.code, _x.signal))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.time is None:
        self.time = genpy.Time()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 81
      (_x.time.secs, _x.time.nsecs, _x.sat, _x.gnssID, _x.freq, _x.locktime, _x.cno, _x.L, _x.P, _x.D, _x.stdevL, _x.stdevP, _x.stdevD, _x.LLI, _x.code, _x.signal,) = _get_struct_2I2BdI7d3B().unpack(str[start:end])
      self.time.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_2I2BdI7d3B = None
def _get_struct_2I2BdI7d3B():
    global _struct_2I2BdI7d3B
    if _struct_2I2BdI7d3B is None:
        _struct_2I2BdI7d3B = struct.Struct("<2I2BdI7d3B")
    return _struct_2I2BdI7d3B
