# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ublox/Ephemeris.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import genpy
import std_msgs.msg

class Ephemeris(genpy.Message):
  _md5sum = "db5d20325900ae20f8d218f3420f173b"
  _type = "ublox/Ephemeris"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """Header header

uint8 sat 					  # Satellite ID (within Constellation)
uint8 gnssID				  # Satellite ID (within Constellation)

uint8 GNSSID_GPS = 0
uint8 GNSSID_SBAS = 1
uint8 GNSSID_GALILEO = 2
uint8 GNSSID_BEIDOU = 3
uint8 GNSSID_QZSS = 5
uint8 GNSSID_GLONASS = 6

time  toe                     # reference time ephemeris (UTC Time inc. leap seconds)                         [s]
time  toc                     # reference time (clock)   (UTC Time inc. leap seconds)                         [s]

uint32 tow                    # time of week in subframe1 the time of the leading bit edge of subframe 2      [s]
uint16 iodc                   # 10 bit issue of data (clock) 8 LSB bits will match the iode                   []
uint8  iode                   # 8 bit  issue of data (ephemeris)                                              []
uint16 week                   # 10 bit gps week 0-1023 (user must account for week rollover )                 [week]
uint32 toes                   # Time of ephemeris (seconds part)
uint32 tocs                   # Time of clock (seconds part)
uint8  health                 # 6 bit health parameter 0 if healthy unhealth othersize                        [0=healthy]
uint8  alert_flag             # 1 = URA may be worse than indicated                                           [0,1]
uint8  anti_spoof             # anti-spoof flag from 0=off 1=on                                               [0,1]
uint8  code_on_L2             # 0=reserved 1=P code on L2 2=C/A on L2                                         [0,1,2]
uint8  ura                    # User Range Accuracy lookup code 0 is excellent 15 is use at own risk          [0-15] see p. 83 GPSICD200C
uint8  L2_P_data_flag         # flag indicating if P is on L2 1=true                                          [0,1]
uint8  fit_interval_flag      # fit interval flag (four hour interval or longer) 0=4 fours 1=greater          [0,1]
uint16 age_of_data_offset     # age of data offset                                                            [s]
float64[4]   tgd              # group delay                                                                   [s]
float64   af2                 # polynomial clock correction coefficient (rate of clock drift)                 [s/s^2]
float64   af1                 # polynomial clock correction coefficient (clock drift)                         [s/s]
float64   af0                 # polynomial clock correction coefficient (clock bias)                          [s]
float64   m0                  # mean anomaly at reference time                                                [rad]
float64   delta_n             # mean motion difference from computed value                                    [rad/s]
float64   ecc                 # eccentricity                                                                  []
float64   sqrta               # square root of the semi-major axis                                            [m^(1/2)]
float64   omega0              # longitude of ascending node of orbit plane at weekly epoch                    [rad]
float64   i0                  # inclination angle at reference time                                           [rad]
float64   w                   # argument of perigee                                                           [rad]
float64   omegadot            # rate of right ascension                                                       [rad/s]
float64   idot                # rate of inclination angle                                                     [rad/s]
float64   cuc                 # amplitude of the cosine harmonic correction term to the argument of latitude  [rad]
float64   cus                 # amplitude of the sine harmonic correction term to the argument of latitude    [rad]
float64   crc                 # amplitude of the cosine harmonic correction term to the orbit radius          [m]
float64   crs                 # amplitude of the sine harmonic correction term to the orbit radius            [m]
float64   cic                 # amplitude of the cosine harmonic correction term to the angle of inclination  [rad]
float64   cis                 # amplitude of the sine harmonic correction term to the angle of inclination    [rad]



================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id
"""
  # Pseudo-constants
  GNSSID_GPS = 0
  GNSSID_SBAS = 1
  GNSSID_GALILEO = 2
  GNSSID_BEIDOU = 3
  GNSSID_QZSS = 5
  GNSSID_GLONASS = 6

  __slots__ = ['header','sat','gnssID','toe','toc','tow','iodc','iode','week','toes','tocs','health','alert_flag','anti_spoof','code_on_L2','ura','L2_P_data_flag','fit_interval_flag','age_of_data_offset','tgd','af2','af1','af0','m0','delta_n','ecc','sqrta','omega0','i0','w','omegadot','idot','cuc','cus','crc','crs','cic','cis']
  _slot_types = ['std_msgs/Header','uint8','uint8','time','time','uint32','uint16','uint8','uint16','uint32','uint32','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint16','float64[4]','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,sat,gnssID,toe,toc,tow,iodc,iode,week,toes,tocs,health,alert_flag,anti_spoof,code_on_L2,ura,L2_P_data_flag,fit_interval_flag,age_of_data_offset,tgd,af2,af1,af0,m0,delta_n,ecc,sqrta,omega0,i0,w,omegadot,idot,cuc,cus,crc,crs,cic,cis

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Ephemeris, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.sat is None:
        self.sat = 0
      if self.gnssID is None:
        self.gnssID = 0
      if self.toe is None:
        self.toe = genpy.Time()
      if self.toc is None:
        self.toc = genpy.Time()
      if self.tow is None:
        self.tow = 0
      if self.iodc is None:
        self.iodc = 0
      if self.iode is None:
        self.iode = 0
      if self.week is None:
        self.week = 0
      if self.toes is None:
        self.toes = 0
      if self.tocs is None:
        self.tocs = 0
      if self.health is None:
        self.health = 0
      if self.alert_flag is None:
        self.alert_flag = 0
      if self.anti_spoof is None:
        self.anti_spoof = 0
      if self.code_on_L2 is None:
        self.code_on_L2 = 0
      if self.ura is None:
        self.ura = 0
      if self.L2_P_data_flag is None:
        self.L2_P_data_flag = 0
      if self.fit_interval_flag is None:
        self.fit_interval_flag = 0
      if self.age_of_data_offset is None:
        self.age_of_data_offset = 0
      if self.tgd is None:
        self.tgd = [0.] * 4
      if self.af2 is None:
        self.af2 = 0.
      if self.af1 is None:
        self.af1 = 0.
      if self.af0 is None:
        self.af0 = 0.
      if self.m0 is None:
        self.m0 = 0.
      if self.delta_n is None:
        self.delta_n = 0.
      if self.ecc is None:
        self.ecc = 0.
      if self.sqrta is None:
        self.sqrta = 0.
      if self.omega0 is None:
        self.omega0 = 0.
      if self.i0 is None:
        self.i0 = 0.
      if self.w is None:
        self.w = 0.
      if self.omegadot is None:
        self.omegadot = 0.
      if self.idot is None:
        self.idot = 0.
      if self.cuc is None:
        self.cuc = 0.
      if self.cus is None:
        self.cus = 0.
      if self.crc is None:
        self.crc = 0.
      if self.crs is None:
        self.crs = 0.
      if self.cic is None:
        self.cic = 0.
      if self.cis is None:
        self.cis = 0.
    else:
      self.header = std_msgs.msg.Header()
      self.sat = 0
      self.gnssID = 0
      self.toe = genpy.Time()
      self.toc = genpy.Time()
      self.tow = 0
      self.iodc = 0
      self.iode = 0
      self.week = 0
      self.toes = 0
      self.tocs = 0
      self.health = 0
      self.alert_flag = 0
      self.anti_spoof = 0
      self.code_on_L2 = 0
      self.ura = 0
      self.L2_P_data_flag = 0
      self.fit_interval_flag = 0
      self.age_of_data_offset = 0
      self.tgd = [0.] * 4
      self.af2 = 0.
      self.af1 = 0.
      self.af0 = 0.
      self.m0 = 0.
      self.delta_n = 0.
      self.ecc = 0.
      self.sqrta = 0.
      self.omega0 = 0.
      self.i0 = 0.
      self.w = 0.
      self.omegadot = 0.
      self.idot = 0.
      self.cuc = 0.
      self.cus = 0.
      self.crc = 0.
      self.crs = 0.
      self.cic = 0.
      self.cis = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_2B5IHBH2I7BH().pack(_x.sat, _x.gnssID, _x.toe.secs, _x.toe.nsecs, _x.toc.secs, _x.toc.nsecs, _x.tow, _x.iodc, _x.iode, _x.week, _x.toes, _x.tocs, _x.health, _x.alert_flag, _x.anti_spoof, _x.code_on_L2, _x.ura, _x.L2_P_data_flag, _x.fit_interval_flag, _x.age_of_data_offset))
      buff.write(_get_struct_4d().pack(*self.tgd))
      _x = self
      buff.write(_get_struct_18d().pack(_x.af2, _x.af1, _x.af0, _x.m0, _x.delta_n, _x.ecc, _x.sqrta, _x.omega0, _x.i0, _x.w, _x.omegadot, _x.idot, _x.cuc, _x.cus, _x.crc, _x.crs, _x.cic, _x.cis))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.toe is None:
        self.toe = genpy.Time()
      if self.toc is None:
        self.toc = genpy.Time()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 44
      (_x.sat, _x.gnssID, _x.toe.secs, _x.toe.nsecs, _x.toc.secs, _x.toc.nsecs, _x.tow, _x.iodc, _x.iode, _x.week, _x.toes, _x.tocs, _x.health, _x.alert_flag, _x.anti_spoof, _x.code_on_L2, _x.ura, _x.L2_P_data_flag, _x.fit_interval_flag, _x.age_of_data_offset,) = _get_struct_2B5IHBH2I7BH().unpack(str[start:end])
      start = end
      end += 32
      self.tgd = _get_struct_4d().unpack(str[start:end])
      _x = self
      start = end
      end += 144
      (_x.af2, _x.af1, _x.af0, _x.m0, _x.delta_n, _x.ecc, _x.sqrta, _x.omega0, _x.i0, _x.w, _x.omegadot, _x.idot, _x.cuc, _x.cus, _x.crc, _x.crs, _x.cic, _x.cis,) = _get_struct_18d().unpack(str[start:end])
      self.toe.canon()
      self.toc.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_2B5IHBH2I7BH().pack(_x.sat, _x.gnssID, _x.toe.secs, _x.toe.nsecs, _x.toc.secs, _x.toc.nsecs, _x.tow, _x.iodc, _x.iode, _x.week, _x.toes, _x.tocs, _x.health, _x.alert_flag, _x.anti_spoof, _x.code_on_L2, _x.ura, _x.L2_P_data_flag, _x.fit_interval_flag, _x.age_of_data_offset))
      buff.write(self.tgd.tostring())
      _x = self
      buff.write(_get_struct_18d().pack(_x.af2, _x.af1, _x.af0, _x.m0, _x.delta_n, _x.ecc, _x.sqrta, _x.omega0, _x.i0, _x.w, _x.omegadot, _x.idot, _x.cuc, _x.cus, _x.crc, _x.crs, _x.cic, _x.cis))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.toe is None:
        self.toe = genpy.Time()
      if self.toc is None:
        self.toc = genpy.Time()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 44
      (_x.sat, _x.gnssID, _x.toe.secs, _x.toe.nsecs, _x.toc.secs, _x.toc.nsecs, _x.tow, _x.iodc, _x.iode, _x.week, _x.toes, _x.tocs, _x.health, _x.alert_flag, _x.anti_spoof, _x.code_on_L2, _x.ura, _x.L2_P_data_flag, _x.fit_interval_flag, _x.age_of_data_offset,) = _get_struct_2B5IHBH2I7BH().unpack(str[start:end])
      start = end
      end += 32
      self.tgd = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=4)
      _x = self
      start = end
      end += 144
      (_x.af2, _x.af1, _x.af0, _x.m0, _x.delta_n, _x.ecc, _x.sqrta, _x.omega0, _x.i0, _x.w, _x.omegadot, _x.idot, _x.cuc, _x.cus, _x.crc, _x.crs, _x.cic, _x.cis,) = _get_struct_18d().unpack(str[start:end])
      self.toe.canon()
      self.toc.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2B5IHBH2I7BH = None
def _get_struct_2B5IHBH2I7BH():
    global _struct_2B5IHBH2I7BH
    if _struct_2B5IHBH2I7BH is None:
        _struct_2B5IHBH2I7BH = struct.Struct("<2B5IHBH2I7BH")
    return _struct_2B5IHBH2I7BH
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_4d = None
def _get_struct_4d():
    global _struct_4d
    if _struct_4d is None:
        _struct_4d = struct.Struct("<4d")
    return _struct_4d
_struct_18d = None
def _get_struct_18d():
    global _struct_18d
    if _struct_18d is None:
        _struct_18d = struct.Struct("<18d")
    return _struct_18d
