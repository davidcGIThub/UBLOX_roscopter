# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ublox/RelPos.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class RelPos(genpy.Message):
  _md5sum = "cbf86997555583211c6ccf05daa1a92f"
  _type = "ublox/RelPos"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """Header header

uint16 refStationId 	# Reference Station ID. Must be in the range 0..4095
float64[3] relPosNED	# NED component of relative position vector (m)
float64 relPosLength 	# Length of relative position vector (m)
float64 relPosHeading 	# Heading of the relative position vector. (rad)
float64[3] relPosHPNED 	# High precision NED, the measurment portion less than a mm. (m)
float64 relPosHPLength 	# High precision Length, the measurment portion less than a mm. (m)
float64[3] accNED 		# Accuracy of relative position North component (m)
float64 accLength 		# Accuracy of Length of the relative position vector (m)
uint32 accHeading 		# Accuracy of heading of the relative position vector (rad)
uint32 flags 			# See enums below

uint32 FLAGS_GNSS_FIX_OK =            1
uint32 FLAGS_DIFF_SOLN =              2
uint32 FLAGS_REL_POS_VALID =          4
uint32 FLAGS_CARR_SOLN_FLOAT =        8
uint32 FLAGS_CARR_SOLN_FIXED =        16
uint32 FLAGS_IS_MOVING =              32
uint32 FLAGS_REF_POS_MISS =           64
uint32 FLAGS_REF_OBS_MISS =           128
uint32 FLAGS_REL_POS_HEADING_VALID =  256
================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id
"""
  # Pseudo-constants
  FLAGS_GNSS_FIX_OK = 1
  FLAGS_DIFF_SOLN = 2
  FLAGS_REL_POS_VALID = 4
  FLAGS_CARR_SOLN_FLOAT = 8
  FLAGS_CARR_SOLN_FIXED = 16
  FLAGS_IS_MOVING = 32
  FLAGS_REF_POS_MISS = 64
  FLAGS_REF_OBS_MISS = 128
  FLAGS_REL_POS_HEADING_VALID = 256

  __slots__ = ['header','refStationId','relPosNED','relPosLength','relPosHeading','relPosHPNED','relPosHPLength','accNED','accLength','accHeading','flags']
  _slot_types = ['std_msgs/Header','uint16','float64[3]','float64','float64','float64[3]','float64','float64[3]','float64','uint32','uint32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,refStationId,relPosNED,relPosLength,relPosHeading,relPosHPNED,relPosHPLength,accNED,accLength,accHeading,flags

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(RelPos, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.refStationId is None:
        self.refStationId = 0
      if self.relPosNED is None:
        self.relPosNED = [0.] * 3
      if self.relPosLength is None:
        self.relPosLength = 0.
      if self.relPosHeading is None:
        self.relPosHeading = 0.
      if self.relPosHPNED is None:
        self.relPosHPNED = [0.] * 3
      if self.relPosHPLength is None:
        self.relPosHPLength = 0.
      if self.accNED is None:
        self.accNED = [0.] * 3
      if self.accLength is None:
        self.accLength = 0.
      if self.accHeading is None:
        self.accHeading = 0
      if self.flags is None:
        self.flags = 0
    else:
      self.header = std_msgs.msg.Header()
      self.refStationId = 0
      self.relPosNED = [0.] * 3
      self.relPosLength = 0.
      self.relPosHeading = 0.
      self.relPosHPNED = [0.] * 3
      self.relPosHPLength = 0.
      self.accNED = [0.] * 3
      self.accLength = 0.
      self.accHeading = 0
      self.flags = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_get_struct_H().pack(self.refStationId))
      buff.write(_get_struct_3d().pack(*self.relPosNED))
      _x = self
      buff.write(_get_struct_2d().pack(_x.relPosLength, _x.relPosHeading))
      buff.write(_get_struct_3d().pack(*self.relPosHPNED))
      buff.write(_get_struct_d().pack(self.relPosHPLength))
      buff.write(_get_struct_3d().pack(*self.accNED))
      _x = self
      buff.write(_get_struct_d2I().pack(_x.accLength, _x.accHeading, _x.flags))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 2
      (self.refStationId,) = _get_struct_H().unpack(str[start:end])
      start = end
      end += 24
      self.relPosNED = _get_struct_3d().unpack(str[start:end])
      _x = self
      start = end
      end += 16
      (_x.relPosLength, _x.relPosHeading,) = _get_struct_2d().unpack(str[start:end])
      start = end
      end += 24
      self.relPosHPNED = _get_struct_3d().unpack(str[start:end])
      start = end
      end += 8
      (self.relPosHPLength,) = _get_struct_d().unpack(str[start:end])
      start = end
      end += 24
      self.accNED = _get_struct_3d().unpack(str[start:end])
      _x = self
      start = end
      end += 16
      (_x.accLength, _x.accHeading, _x.flags,) = _get_struct_d2I().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_get_struct_H().pack(self.refStationId))
      buff.write(self.relPosNED.tostring())
      _x = self
      buff.write(_get_struct_2d().pack(_x.relPosLength, _x.relPosHeading))
      buff.write(self.relPosHPNED.tostring())
      buff.write(_get_struct_d().pack(self.relPosHPLength))
      buff.write(self.accNED.tostring())
      _x = self
      buff.write(_get_struct_d2I().pack(_x.accLength, _x.accHeading, _x.flags))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 2
      (self.refStationId,) = _get_struct_H().unpack(str[start:end])
      start = end
      end += 24
      self.relPosNED = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=3)
      _x = self
      start = end
      end += 16
      (_x.relPosLength, _x.relPosHeading,) = _get_struct_2d().unpack(str[start:end])
      start = end
      end += 24
      self.relPosHPNED = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=3)
      start = end
      end += 8
      (self.relPosHPLength,) = _get_struct_d().unpack(str[start:end])
      start = end
      end += 24
      self.accNED = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=3)
      _x = self
      start = end
      end += 16
      (_x.accLength, _x.accHeading, _x.flags,) = _get_struct_d2I().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_d2I = None
def _get_struct_d2I():
    global _struct_d2I
    if _struct_d2I is None:
        _struct_d2I = struct.Struct("<d2I")
    return _struct_d2I
_struct_d = None
def _get_struct_d():
    global _struct_d
    if _struct_d is None:
        _struct_d = struct.Struct("<d")
    return _struct_d
_struct_H = None
def _get_struct_H():
    global _struct_H
    if _struct_H is None:
        _struct_H = struct.Struct("<H")
    return _struct_H
_struct_2d = None
def _get_struct_2d():
    global _struct_2d
    if _struct_2d is None:
        _struct_2d = struct.Struct("<2d")
    return _struct_2d
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
