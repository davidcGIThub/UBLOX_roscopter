# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ublox/GlonassEphemeris.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import genpy
import std_msgs.msg

class GlonassEphemeris(genpy.Message):
  _md5sum = "c574661def77b280f8dfa8e53010b11b"
  _type = "ublox/GlonassEphemeris"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """Header header

uint8 sat 					  # Satellite ID (within Constellation)
uint8 gnssID				  # Satellite ID (within Constellation)

uint8 GNSSID_GPS = 0
uint8 GNSSID_SBAS = 1
uint8 GNSSID_GALILEO = 2
uint8 GNSSID_BEIDOU = 3
uint8 GNSSID_QZSS = 5
uint8 GNSSID_GLONASS = 6

time toe        	# epoch of epherides (UTC inc. leap-seconds)
time tof            # message frame time (UTC inc. leap-seconds)

int32 iode          # IODE (0-6 bit of tb field)
int32 frq           # satellite frequency number
int32 svh			# satellite health
int32 sva			# satellite accuracy (ura)
int32 age   		# age of operation
float64[3] pos      # satellite position (ecef) (m)
float64[3] vel      # satellite velocity (ecef) (m/s)
float64[3] acc      # satellite acceleration (ecef) (m/s^2)
float64 taun		# SV clock bias (s)
float64 gamn   	  	# relative freq bias
float64 dtaun       # delay between L1 and L2 (s)
================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id
"""
  # Pseudo-constants
  GNSSID_GPS = 0
  GNSSID_SBAS = 1
  GNSSID_GALILEO = 2
  GNSSID_BEIDOU = 3
  GNSSID_QZSS = 5
  GNSSID_GLONASS = 6

  __slots__ = ['header','sat','gnssID','toe','tof','iode','frq','svh','sva','age','pos','vel','acc','taun','gamn','dtaun']
  _slot_types = ['std_msgs/Header','uint8','uint8','time','time','int32','int32','int32','int32','int32','float64[3]','float64[3]','float64[3]','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,sat,gnssID,toe,tof,iode,frq,svh,sva,age,pos,vel,acc,taun,gamn,dtaun

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GlonassEphemeris, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.sat is None:
        self.sat = 0
      if self.gnssID is None:
        self.gnssID = 0
      if self.toe is None:
        self.toe = genpy.Time()
      if self.tof is None:
        self.tof = genpy.Time()
      if self.iode is None:
        self.iode = 0
      if self.frq is None:
        self.frq = 0
      if self.svh is None:
        self.svh = 0
      if self.sva is None:
        self.sva = 0
      if self.age is None:
        self.age = 0
      if self.pos is None:
        self.pos = [0.] * 3
      if self.vel is None:
        self.vel = [0.] * 3
      if self.acc is None:
        self.acc = [0.] * 3
      if self.taun is None:
        self.taun = 0.
      if self.gamn is None:
        self.gamn = 0.
      if self.dtaun is None:
        self.dtaun = 0.
    else:
      self.header = std_msgs.msg.Header()
      self.sat = 0
      self.gnssID = 0
      self.toe = genpy.Time()
      self.tof = genpy.Time()
      self.iode = 0
      self.frq = 0
      self.svh = 0
      self.sva = 0
      self.age = 0
      self.pos = [0.] * 3
      self.vel = [0.] * 3
      self.acc = [0.] * 3
      self.taun = 0.
      self.gamn = 0.
      self.dtaun = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_2B4I5i().pack(_x.sat, _x.gnssID, _x.toe.secs, _x.toe.nsecs, _x.tof.secs, _x.tof.nsecs, _x.iode, _x.frq, _x.svh, _x.sva, _x.age))
      buff.write(_get_struct_3d().pack(*self.pos))
      buff.write(_get_struct_3d().pack(*self.vel))
      buff.write(_get_struct_3d().pack(*self.acc))
      _x = self
      buff.write(_get_struct_3d().pack(_x.taun, _x.gamn, _x.dtaun))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.toe is None:
        self.toe = genpy.Time()
      if self.tof is None:
        self.tof = genpy.Time()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 38
      (_x.sat, _x.gnssID, _x.toe.secs, _x.toe.nsecs, _x.tof.secs, _x.tof.nsecs, _x.iode, _x.frq, _x.svh, _x.sva, _x.age,) = _get_struct_2B4I5i().unpack(str[start:end])
      start = end
      end += 24
      self.pos = _get_struct_3d().unpack(str[start:end])
      start = end
      end += 24
      self.vel = _get_struct_3d().unpack(str[start:end])
      start = end
      end += 24
      self.acc = _get_struct_3d().unpack(str[start:end])
      _x = self
      start = end
      end += 24
      (_x.taun, _x.gamn, _x.dtaun,) = _get_struct_3d().unpack(str[start:end])
      self.toe.canon()
      self.tof.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_2B4I5i().pack(_x.sat, _x.gnssID, _x.toe.secs, _x.toe.nsecs, _x.tof.secs, _x.tof.nsecs, _x.iode, _x.frq, _x.svh, _x.sva, _x.age))
      buff.write(self.pos.tostring())
      buff.write(self.vel.tostring())
      buff.write(self.acc.tostring())
      _x = self
      buff.write(_get_struct_3d().pack(_x.taun, _x.gamn, _x.dtaun))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.toe is None:
        self.toe = genpy.Time()
      if self.tof is None:
        self.tof = genpy.Time()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 38
      (_x.sat, _x.gnssID, _x.toe.secs, _x.toe.nsecs, _x.tof.secs, _x.tof.nsecs, _x.iode, _x.frq, _x.svh, _x.sva, _x.age,) = _get_struct_2B4I5i().unpack(str[start:end])
      start = end
      end += 24
      self.pos = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=3)
      start = end
      end += 24
      self.vel = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=3)
      start = end
      end += 24
      self.acc = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=3)
      _x = self
      start = end
      end += 24
      (_x.taun, _x.gamn, _x.dtaun,) = _get_struct_3d().unpack(str[start:end])
      self.toe.canon()
      self.tof.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_2B4I5i = None
def _get_struct_2B4I5i():
    global _struct_2B4I5i
    if _struct_2B4I5i is None:
        _struct_2B4I5i = struct.Struct("<2B4I5i")
    return _struct_2B4I5i
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
