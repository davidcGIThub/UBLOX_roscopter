// Generated by gencpp from file ublox/PosVelEcef.msg
// DO NOT EDIT!


#ifndef UBLOX_MESSAGE_POSVELECEF_H
#define UBLOX_MESSAGE_POSVELECEF_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace ublox
{
template <class ContainerAllocator>
struct PosVelEcef_
{
  typedef PosVelEcef_<ContainerAllocator> Type;

  PosVelEcef_()
    : header()
    , fix(0)
    , lla()
    , position()
    , horizontal_accuracy(0.0)
    , vertical_accuracy(0.0)
    , velocity()
    , speed_accuracy(0.0)  {
      lla.assign(0.0);

      position.assign(0.0);

      velocity.assign(0.0);
  }
  PosVelEcef_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , fix(0)
    , lla()
    , position()
    , horizontal_accuracy(0.0)
    , vertical_accuracy(0.0)
    , velocity()
    , speed_accuracy(0.0)  {
  (void)_alloc;
      lla.assign(0.0);

      position.assign(0.0);

      velocity.assign(0.0);
  }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _fix_type;
  _fix_type fix;

   typedef boost::array<double, 3>  _lla_type;
  _lla_type lla;

   typedef boost::array<double, 3>  _position_type;
  _position_type position;

   typedef double _horizontal_accuracy_type;
  _horizontal_accuracy_type horizontal_accuracy;

   typedef double _vertical_accuracy_type;
  _vertical_accuracy_type vertical_accuracy;

   typedef boost::array<double, 3>  _velocity_type;
  _velocity_type velocity;

   typedef double _speed_accuracy_type;
  _speed_accuracy_type speed_accuracy;



  enum {
    FIX_TYPE_NO_FIX = 0u,
    FIX_TYPE_DEAD_RECKONING = 1u,
    FIX_TYPE_2D = 2u,
    FIX_TYPE_3D = 3u,
    FIX_TYPE_GPS_AND_DEAD_RECKONING = 4u,
    FIX_TYPE_TIME_ONLY = 5u,
  };


  typedef boost::shared_ptr< ::ublox::PosVelEcef_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ublox::PosVelEcef_<ContainerAllocator> const> ConstPtr;

}; // struct PosVelEcef_

typedef ::ublox::PosVelEcef_<std::allocator<void> > PosVelEcef;

typedef boost::shared_ptr< ::ublox::PosVelEcef > PosVelEcefPtr;
typedef boost::shared_ptr< ::ublox::PosVelEcef const> PosVelEcefConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ublox::PosVelEcef_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ublox::PosVelEcef_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace ublox

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'std_msgs': ['/opt/ros/melodic/share/std_msgs/cmake/../msg'], 'ublox': ['/home/groot/roscop_ws/src/UBLOX_read/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::ublox::PosVelEcef_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ublox::PosVelEcef_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ublox::PosVelEcef_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ublox::PosVelEcef_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ublox::PosVelEcef_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ublox::PosVelEcef_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ublox::PosVelEcef_<ContainerAllocator> >
{
  static const char* value()
  {
    return "145d49980c27263689fedf0808e22815";
  }

  static const char* value(const ::ublox::PosVelEcef_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x145d49980c272636ULL;
  static const uint64_t static_value2 = 0x89fedf0808e22815ULL;
};

template<class ContainerAllocator>
struct DataType< ::ublox::PosVelEcef_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ublox/PosVelEcef";
  }

  static const char* value(const ::ublox::PosVelEcef_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ublox::PosVelEcef_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header # Estimated ROS time at moment of measurement\n"
"uint8 fix # fix type, see below\n"
"float64[3] lla # deg, deg, m\n"
"float64[3] position # m, ECEF frame\n"
"float64 horizontal_accuracy # m\n"
"float64 vertical_accuracy # m\n"
"float64[3] velocity # m/s, ECEF frame\n"
"float64 speed_accuracy # m/s\n"
"\n"
"uint8 FIX_TYPE_NO_FIX = 0 \n"
"uint8 FIX_TYPE_DEAD_RECKONING = 1\n"
"uint8 FIX_TYPE_2D = 2\n"
"uint8 FIX_TYPE_3D = 3 \n"
"uint8 FIX_TYPE_GPS_AND_DEAD_RECKONING = 4\n"
"uint8 FIX_TYPE_TIME_ONLY = 5\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::ublox::PosVelEcef_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ublox::PosVelEcef_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.fix);
      stream.next(m.lla);
      stream.next(m.position);
      stream.next(m.horizontal_accuracy);
      stream.next(m.vertical_accuracy);
      stream.next(m.velocity);
      stream.next(m.speed_accuracy);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PosVelEcef_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ublox::PosVelEcef_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ublox::PosVelEcef_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "fix: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.fix);
    s << indent << "lla[]" << std::endl;
    for (size_t i = 0; i < v.lla.size(); ++i)
    {
      s << indent << "  lla[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.lla[i]);
    }
    s << indent << "position[]" << std::endl;
    for (size_t i = 0; i < v.position.size(); ++i)
    {
      s << indent << "  position[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.position[i]);
    }
    s << indent << "horizontal_accuracy: ";
    Printer<double>::stream(s, indent + "  ", v.horizontal_accuracy);
    s << indent << "vertical_accuracy: ";
    Printer<double>::stream(s, indent + "  ", v.vertical_accuracy);
    s << indent << "velocity[]" << std::endl;
    for (size_t i = 0; i < v.velocity.size(); ++i)
    {
      s << indent << "  velocity[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.velocity[i]);
    }
    s << indent << "speed_accuracy: ";
    Printer<double>::stream(s, indent + "  ", v.speed_accuracy);
  }
};

} // namespace message_operations
} // namespace ros

#endif // UBLOX_MESSAGE_POSVELECEF_H
