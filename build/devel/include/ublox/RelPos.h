// Generated by gencpp from file ublox/RelPos.msg
// DO NOT EDIT!


#ifndef UBLOX_MESSAGE_RELPOS_H
#define UBLOX_MESSAGE_RELPOS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace ublox
{
template <class ContainerAllocator>
struct RelPos_
{
  typedef RelPos_<ContainerAllocator> Type;

  RelPos_()
    : header()
    , refStationId(0)
    , relPosNED()
    , relPosLength(0.0)
    , relPosHeading(0.0)
    , relPosHPNED()
    , relPosHPLength(0.0)
    , accNED()
    , accLength(0.0)
    , accHeading(0)
    , flags(0)  {
      relPosNED.assign(0.0);

      relPosHPNED.assign(0.0);

      accNED.assign(0.0);
  }
  RelPos_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , refStationId(0)
    , relPosNED()
    , relPosLength(0.0)
    , relPosHeading(0.0)
    , relPosHPNED()
    , relPosHPLength(0.0)
    , accNED()
    , accLength(0.0)
    , accHeading(0)
    , flags(0)  {
  (void)_alloc;
      relPosNED.assign(0.0);

      relPosHPNED.assign(0.0);

      accNED.assign(0.0);
  }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint16_t _refStationId_type;
  _refStationId_type refStationId;

   typedef boost::array<double, 3>  _relPosNED_type;
  _relPosNED_type relPosNED;

   typedef double _relPosLength_type;
  _relPosLength_type relPosLength;

   typedef double _relPosHeading_type;
  _relPosHeading_type relPosHeading;

   typedef boost::array<double, 3>  _relPosHPNED_type;
  _relPosHPNED_type relPosHPNED;

   typedef double _relPosHPLength_type;
  _relPosHPLength_type relPosHPLength;

   typedef boost::array<double, 3>  _accNED_type;
  _accNED_type accNED;

   typedef double _accLength_type;
  _accLength_type accLength;

   typedef uint32_t _accHeading_type;
  _accHeading_type accHeading;

   typedef uint32_t _flags_type;
  _flags_type flags;



  enum {
    FLAGS_GNSS_FIX_OK = 1u,
    FLAGS_DIFF_SOLN = 2u,
    FLAGS_REL_POS_VALID = 4u,
    FLAGS_CARR_SOLN_FLOAT = 8u,
    FLAGS_CARR_SOLN_FIXED = 16u,
    FLAGS_IS_MOVING = 32u,
    FLAGS_REF_POS_MISS = 64u,
    FLAGS_REF_OBS_MISS = 128u,
    FLAGS_REL_POS_HEADING_VALID = 256u,
  };


  typedef boost::shared_ptr< ::ublox::RelPos_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ublox::RelPos_<ContainerAllocator> const> ConstPtr;

}; // struct RelPos_

typedef ::ublox::RelPos_<std::allocator<void> > RelPos;

typedef boost::shared_ptr< ::ublox::RelPos > RelPosPtr;
typedef boost::shared_ptr< ::ublox::RelPos const> RelPosConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ublox::RelPos_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ublox::RelPos_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace ublox

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'std_msgs': ['/opt/ros/melodic/share/std_msgs/cmake/../msg'], 'ublox': ['/home/groot/roscop_ws/src/UBLOX_read/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::ublox::RelPos_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ublox::RelPos_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ublox::RelPos_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ublox::RelPos_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ublox::RelPos_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ublox::RelPos_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ublox::RelPos_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cbf86997555583211c6ccf05daa1a92f";
  }

  static const char* value(const ::ublox::RelPos_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xcbf8699755558321ULL;
  static const uint64_t static_value2 = 0x1c6ccf05daa1a92fULL;
};

template<class ContainerAllocator>
struct DataType< ::ublox::RelPos_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ublox/RelPos";
  }

  static const char* value(const ::ublox::RelPos_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ublox::RelPos_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"\n"
"uint16 refStationId 	# Reference Station ID. Must be in the range 0..4095\n"
"float64[3] relPosNED	# NED component of relative position vector (m)\n"
"float64 relPosLength 	# Length of relative position vector (m)\n"
"float64 relPosHeading 	# Heading of the relative position vector. (rad)\n"
"float64[3] relPosHPNED 	# High precision NED, the measurment portion less than a mm. (m)\n"
"float64 relPosHPLength 	# High precision Length, the measurment portion less than a mm. (m)\n"
"float64[3] accNED 		# Accuracy of relative position North component (m)\n"
"float64 accLength 		# Accuracy of Length of the relative position vector (m)\n"
"uint32 accHeading 		# Accuracy of heading of the relative position vector (rad)\n"
"uint32 flags 			# See enums below\n"
"\n"
"uint32 FLAGS_GNSS_FIX_OK =            1\n"
"uint32 FLAGS_DIFF_SOLN =              2\n"
"uint32 FLAGS_REL_POS_VALID =          4\n"
"uint32 FLAGS_CARR_SOLN_FLOAT =        8\n"
"uint32 FLAGS_CARR_SOLN_FIXED =        16\n"
"uint32 FLAGS_IS_MOVING =              32\n"
"uint32 FLAGS_REF_POS_MISS =           64\n"
"uint32 FLAGS_REF_OBS_MISS =           128\n"
"uint32 FLAGS_REL_POS_HEADING_VALID =  256\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::ublox::RelPos_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ublox::RelPos_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.refStationId);
      stream.next(m.relPosNED);
      stream.next(m.relPosLength);
      stream.next(m.relPosHeading);
      stream.next(m.relPosHPNED);
      stream.next(m.relPosHPLength);
      stream.next(m.accNED);
      stream.next(m.accLength);
      stream.next(m.accHeading);
      stream.next(m.flags);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RelPos_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ublox::RelPos_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ublox::RelPos_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "refStationId: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.refStationId);
    s << indent << "relPosNED[]" << std::endl;
    for (size_t i = 0; i < v.relPosNED.size(); ++i)
    {
      s << indent << "  relPosNED[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.relPosNED[i]);
    }
    s << indent << "relPosLength: ";
    Printer<double>::stream(s, indent + "  ", v.relPosLength);
    s << indent << "relPosHeading: ";
    Printer<double>::stream(s, indent + "  ", v.relPosHeading);
    s << indent << "relPosHPNED[]" << std::endl;
    for (size_t i = 0; i < v.relPosHPNED.size(); ++i)
    {
      s << indent << "  relPosHPNED[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.relPosHPNED[i]);
    }
    s << indent << "relPosHPLength: ";
    Printer<double>::stream(s, indent + "  ", v.relPosHPLength);
    s << indent << "accNED[]" << std::endl;
    for (size_t i = 0; i < v.accNED.size(); ++i)
    {
      s << indent << "  accNED[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.accNED[i]);
    }
    s << indent << "accLength: ";
    Printer<double>::stream(s, indent + "  ", v.accLength);
    s << indent << "accHeading: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.accHeading);
    s << indent << "flags: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.flags);
  }
};

} // namespace message_operations
} // namespace ros

#endif // UBLOX_MESSAGE_RELPOS_H
