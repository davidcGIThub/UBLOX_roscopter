// Generated by gencpp from file ublox/Observation.msg
// DO NOT EDIT!


#ifndef UBLOX_MESSAGE_OBSERVATION_H
#define UBLOX_MESSAGE_OBSERVATION_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace ublox
{
template <class ContainerAllocator>
struct Observation_
{
  typedef Observation_<ContainerAllocator> Type;

  Observation_()
    : header()
    , time()
    , sat(0)
    , gnssID(0)
    , freq(0.0)
    , locktime(0)
    , cno(0.0)
    , L(0.0)
    , P(0.0)
    , D(0.0)
    , stdevL(0.0)
    , stdevP(0.0)
    , stdevD(0.0)
    , LLI(0)
    , code(0)
    , signal(0)  {
    }
  Observation_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , time()
    , sat(0)
    , gnssID(0)
    , freq(0.0)
    , locktime(0)
    , cno(0.0)
    , L(0.0)
    , P(0.0)
    , D(0.0)
    , stdevL(0.0)
    , stdevP(0.0)
    , stdevD(0.0)
    , LLI(0)
    , code(0)
    , signal(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef ros::Time _time_type;
  _time_type time;

   typedef uint8_t _sat_type;
  _sat_type sat;

   typedef uint8_t _gnssID_type;
  _gnssID_type gnssID;

   typedef double _freq_type;
  _freq_type freq;

   typedef uint32_t _locktime_type;
  _locktime_type locktime;

   typedef double _cno_type;
  _cno_type cno;

   typedef double _L_type;
  _L_type L;

   typedef double _P_type;
  _P_type P;

   typedef double _D_type;
  _D_type D;

   typedef double _stdevL_type;
  _stdevL_type stdevL;

   typedef double _stdevP_type;
  _stdevP_type stdevP;

   typedef double _stdevD_type;
  _stdevD_type stdevD;

   typedef uint8_t _LLI_type;
  _LLI_type LLI;

   typedef uint8_t _code_type;
  _code_type code;

   typedef uint8_t _signal_type;
  _signal_type signal;



  enum {
    GNSSID_GPS = 0u,
    GNSSID_SBAS = 1u,
    GNSSID_GALILEO = 2u,
    GNSSID_BEIDOU = 3u,
    GNSSID_QZSS = 5u,
    GNSSID_GLONASS = 6u,
    LLI_LOST = 1u,
    LLI_HALF_CYCLE_AMB = 2u,
    CODE_L1C = 1u,
    BEIDOU_CODE_L1I = 2u,
    GPS_L1_CA = 1u,
    GPS_L2_CL = 2u,
    GPS_L2_CM = 3u,
    GALILEO_E1_C = 4u,
    GALILEO_E1_B = 5u,
    GALILEO_E5_BI = 6u,
    GALILEO_E5_BQ = 7u,
    BEIDOU_B1I_D1 = 8u,
    BEIDOU_B1I_D2 = 9u,
    BEIDOU_B2I_D1 = 10u,
    BEIDOU_B2I_D2 = 11u,
    QZSS_L1_CA = 12u,
    GLONASS_L1 = 13u,
    GLONASS_L2 = 14u,
  };


  typedef boost::shared_ptr< ::ublox::Observation_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ublox::Observation_<ContainerAllocator> const> ConstPtr;

}; // struct Observation_

typedef ::ublox::Observation_<std::allocator<void> > Observation;

typedef boost::shared_ptr< ::ublox::Observation > ObservationPtr;
typedef boost::shared_ptr< ::ublox::Observation const> ObservationConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ublox::Observation_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ublox::Observation_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace ublox

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'std_msgs': ['/opt/ros/melodic/share/std_msgs/cmake/../msg'], 'ublox': ['/home/groot/roscop_ws/src/UBLOX_read/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::ublox::Observation_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ublox::Observation_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ublox::Observation_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ublox::Observation_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ublox::Observation_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ublox::Observation_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ublox::Observation_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6c7a4e3369ffffdbcc191cca0af79a8c";
  }

  static const char* value(const ::ublox::Observation_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6c7a4e3369ffffdbULL;
  static const uint64_t static_value2 = 0xcc191cca0af79a8cULL;
};

template<class ContainerAllocator>
struct DataType< ::ublox::Observation_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ublox/Observation";
  }

  static const char* value(const ::ublox::Observation_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ublox::Observation_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"\n"
"time time           # time of observation (UTC Time inc. Leap Seconds)\n"
"uint8 sat 		    # satellite number (within constellation)\n"
"uint8 gnssID	    # gnssID\n"
"\n"
"uint8 GNSSID_GPS = 0\n"
"uint8 GNSSID_SBAS = 1\n"
"uint8 GNSSID_GALILEO = 2\n"
"uint8 GNSSID_BEIDOU = 3\n"
"uint8 GNSSID_QZSS = 5\n"
"uint8 GNSSID_GLONASS = 6\n"
"\n"
"float64 freq        # carrier-phase frequency (GLONASS uses different frequency for each satellite)\n"
"uint32 locktime		# carrier-phase lock counter (max=64500ms)\n"
"float64 cno			# Carrier-to-noise density ratio (signal strength)[dB-Hz]\n"
"\n"
"float64 L      		# carrier-phase (cycle)\n"
"float64 P      		# pseudorange (m)\n"
"float64 D      		# doppler frequency (Hz)\n"
"float64 stdevL  	# carrier-phase stddev (cycle)\n"
"float64 stdevP  	# psuedorange stddev (m)\n"
"float64 stdevD  	# doppler stddev (Hz)\n"
"\n"
"uint8 LLI 			# Loss-of-Lock Indicator\n"
"uint8 LLI_LOST = 1\n"
"uint8 LLI_HALF_CYCLE_AMB = 2\n"
"\n"
"uint8 code 			# code indicator\n"
"uint8 CODE_L1C = 1\n"
"uint8 BEIDOU_CODE_L1I = 2\n"
"\n"
"uint8 signal 		# signal identifier\n"
"uint8 GPS_L1_CA = 1\n"
"uint8 GPS_L2_CL = 2\n"
"uint8 GPS_L2_CM = 3\n"
"uint8 GALILEO_E1_C = 4\n"
"uint8 GALILEO_E1_B = 5\n"
"uint8 GALILEO_E5_BI = 6\n"
"uint8 GALILEO_E5_BQ = 7\n"
"uint8 BEIDOU_B1I_D1 = 8\n"
"uint8 BEIDOU_B1I_D2 = 9\n"
"uint8 BEIDOU_B2I_D1 = 10\n"
"uint8 BEIDOU_B2I_D2 = 11\n"
"uint8 QZSS_L1_CA = 12\n"
"uint8 GLONASS_L1 = 13\n"
"uint8 GLONASS_L2 = 14\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::ublox::Observation_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ublox::Observation_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.time);
      stream.next(m.sat);
      stream.next(m.gnssID);
      stream.next(m.freq);
      stream.next(m.locktime);
      stream.next(m.cno);
      stream.next(m.L);
      stream.next(m.P);
      stream.next(m.D);
      stream.next(m.stdevL);
      stream.next(m.stdevP);
      stream.next(m.stdevD);
      stream.next(m.LLI);
      stream.next(m.code);
      stream.next(m.signal);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Observation_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ublox::Observation_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ublox::Observation_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "time: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.time);
    s << indent << "sat: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.sat);
    s << indent << "gnssID: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.gnssID);
    s << indent << "freq: ";
    Printer<double>::stream(s, indent + "  ", v.freq);
    s << indent << "locktime: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.locktime);
    s << indent << "cno: ";
    Printer<double>::stream(s, indent + "  ", v.cno);
    s << indent << "L: ";
    Printer<double>::stream(s, indent + "  ", v.L);
    s << indent << "P: ";
    Printer<double>::stream(s, indent + "  ", v.P);
    s << indent << "D: ";
    Printer<double>::stream(s, indent + "  ", v.D);
    s << indent << "stdevL: ";
    Printer<double>::stream(s, indent + "  ", v.stdevL);
    s << indent << "stdevP: ";
    Printer<double>::stream(s, indent + "  ", v.stdevP);
    s << indent << "stdevD: ";
    Printer<double>::stream(s, indent + "  ", v.stdevD);
    s << indent << "LLI: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.LLI);
    s << indent << "code: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.code);
    s << indent << "signal: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.signal);
  }
};

} // namespace message_operations
} // namespace ros

#endif // UBLOX_MESSAGE_OBSERVATION_H
