// Generated by gencpp from file ublox/SurveyStatus.msg
// DO NOT EDIT!


#ifndef UBLOX_MESSAGE_SURVEYSTATUS_H
#define UBLOX_MESSAGE_SURVEYSTATUS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace ublox
{
template <class ContainerAllocator>
struct SurveyStatus_
{
  typedef SurveyStatus_<ContainerAllocator> Type;

  SurveyStatus_()
    : header()
    , dur(0)
    , meanXYZ()
    , meanAcc(0)
    , obs(0)
    , meanXYZHP()
    , valid(0)
    , active(0)  {
      meanXYZ.assign(0.0);

      meanXYZHP.assign(0.0);
  }
  SurveyStatus_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , dur(0)
    , meanXYZ()
    , meanAcc(0)
    , obs(0)
    , meanXYZHP()
    , valid(0)
    , active(0)  {
  (void)_alloc;
      meanXYZ.assign(0.0);

      meanXYZHP.assign(0.0);
  }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint32_t _dur_type;
  _dur_type dur;

   typedef boost::array<double, 3>  _meanXYZ_type;
  _meanXYZ_type meanXYZ;

   typedef uint32_t _meanAcc_type;
  _meanAcc_type meanAcc;

   typedef uint32_t _obs_type;
  _obs_type obs;

   typedef boost::array<double, 3>  _meanXYZHP_type;
  _meanXYZHP_type meanXYZHP;

   typedef uint8_t _valid_type;
  _valid_type valid;

   typedef uint8_t _active_type;
  _active_type active;





  typedef boost::shared_ptr< ::ublox::SurveyStatus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ublox::SurveyStatus_<ContainerAllocator> const> ConstPtr;

}; // struct SurveyStatus_

typedef ::ublox::SurveyStatus_<std::allocator<void> > SurveyStatus;

typedef boost::shared_ptr< ::ublox::SurveyStatus > SurveyStatusPtr;
typedef boost::shared_ptr< ::ublox::SurveyStatus const> SurveyStatusConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ublox::SurveyStatus_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ublox::SurveyStatus_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace ublox

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'std_msgs': ['/opt/ros/melodic/share/std_msgs/cmake/../msg'], 'ublox': ['/home/groot/roscop_ws/src/UBLOX_read/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::ublox::SurveyStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ublox::SurveyStatus_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ublox::SurveyStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ublox::SurveyStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ublox::SurveyStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ublox::SurveyStatus_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ublox::SurveyStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6f199f2846f85fa36f2129eacfe3c617";
  }

  static const char* value(const ::ublox::SurveyStatus_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6f199f2846f85fa3ULL;
  static const uint64_t static_value2 = 0x6f2129eacfe3c617ULL;
};

template<class ContainerAllocator>
struct DataType< ::ublox::SurveyStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ublox/SurveyStatus";
  }

  static const char* value(const ::ublox::SurveyStatus_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ublox::SurveyStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"\n"
"uint32 dur 			# Passed survey-in observation time s\n"
"float64[3] meanXYZ			# Current survey-in mean position ECEF X coordinate cm\n"
"uint32 meanAcc		# Current survey-in mean position accuracy mm\n"
"uint32 obs 			# number of position observations used during survey-in\n"
"float64[3] meanXYZHP\n"
"uint8 valid 			# Survey-in postion validity flag, 1=valid, otherwise 0\n"
"uint8 active			# survey-in in progress flag, 1 = in-progress, otherwise 0\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::ublox::SurveyStatus_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ublox::SurveyStatus_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.dur);
      stream.next(m.meanXYZ);
      stream.next(m.meanAcc);
      stream.next(m.obs);
      stream.next(m.meanXYZHP);
      stream.next(m.valid);
      stream.next(m.active);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SurveyStatus_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ublox::SurveyStatus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ublox::SurveyStatus_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "dur: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.dur);
    s << indent << "meanXYZ[]" << std::endl;
    for (size_t i = 0; i < v.meanXYZ.size(); ++i)
    {
      s << indent << "  meanXYZ[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.meanXYZ[i]);
    }
    s << indent << "meanAcc: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.meanAcc);
    s << indent << "obs: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.obs);
    s << indent << "meanXYZHP[]" << std::endl;
    for (size_t i = 0; i < v.meanXYZHP.size(); ++i)
    {
      s << indent << "  meanXYZHP[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.meanXYZHP[i]);
    }
    s << indent << "valid: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.valid);
    s << indent << "active: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.active);
  }
};

} // namespace message_operations
} // namespace ros

#endif // UBLOX_MESSAGE_SURVEYSTATUS_H
