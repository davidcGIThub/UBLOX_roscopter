// Generated by gencpp from file ublox/GlonassEphemeris.msg
// DO NOT EDIT!


#ifndef UBLOX_MESSAGE_GLONASSEPHEMERIS_H
#define UBLOX_MESSAGE_GLONASSEPHEMERIS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace ublox
{
template <class ContainerAllocator>
struct GlonassEphemeris_
{
  typedef GlonassEphemeris_<ContainerAllocator> Type;

  GlonassEphemeris_()
    : header()
    , sat(0)
    , gnssID(0)
    , toe()
    , tof()
    , iode(0)
    , frq(0)
    , svh(0)
    , sva(0)
    , age(0)
    , pos()
    , vel()
    , acc()
    , taun(0.0)
    , gamn(0.0)
    , dtaun(0.0)  {
      pos.assign(0.0);

      vel.assign(0.0);

      acc.assign(0.0);
  }
  GlonassEphemeris_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , sat(0)
    , gnssID(0)
    , toe()
    , tof()
    , iode(0)
    , frq(0)
    , svh(0)
    , sva(0)
    , age(0)
    , pos()
    , vel()
    , acc()
    , taun(0.0)
    , gamn(0.0)
    , dtaun(0.0)  {
  (void)_alloc;
      pos.assign(0.0);

      vel.assign(0.0);

      acc.assign(0.0);
  }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _sat_type;
  _sat_type sat;

   typedef uint8_t _gnssID_type;
  _gnssID_type gnssID;

   typedef ros::Time _toe_type;
  _toe_type toe;

   typedef ros::Time _tof_type;
  _tof_type tof;

   typedef int32_t _iode_type;
  _iode_type iode;

   typedef int32_t _frq_type;
  _frq_type frq;

   typedef int32_t _svh_type;
  _svh_type svh;

   typedef int32_t _sva_type;
  _sva_type sva;

   typedef int32_t _age_type;
  _age_type age;

   typedef boost::array<double, 3>  _pos_type;
  _pos_type pos;

   typedef boost::array<double, 3>  _vel_type;
  _vel_type vel;

   typedef boost::array<double, 3>  _acc_type;
  _acc_type acc;

   typedef double _taun_type;
  _taun_type taun;

   typedef double _gamn_type;
  _gamn_type gamn;

   typedef double _dtaun_type;
  _dtaun_type dtaun;



  enum {
    GNSSID_GPS = 0u,
    GNSSID_SBAS = 1u,
    GNSSID_GALILEO = 2u,
    GNSSID_BEIDOU = 3u,
    GNSSID_QZSS = 5u,
    GNSSID_GLONASS = 6u,
  };


  typedef boost::shared_ptr< ::ublox::GlonassEphemeris_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ublox::GlonassEphemeris_<ContainerAllocator> const> ConstPtr;

}; // struct GlonassEphemeris_

typedef ::ublox::GlonassEphemeris_<std::allocator<void> > GlonassEphemeris;

typedef boost::shared_ptr< ::ublox::GlonassEphemeris > GlonassEphemerisPtr;
typedef boost::shared_ptr< ::ublox::GlonassEphemeris const> GlonassEphemerisConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ublox::GlonassEphemeris_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ublox::GlonassEphemeris_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace ublox

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'std_msgs': ['/opt/ros/melodic/share/std_msgs/cmake/../msg'], 'ublox': ['/home/groot/roscop_ws/src/UBLOX_read/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::ublox::GlonassEphemeris_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ublox::GlonassEphemeris_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ublox::GlonassEphemeris_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ublox::GlonassEphemeris_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ublox::GlonassEphemeris_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ublox::GlonassEphemeris_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ublox::GlonassEphemeris_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c574661def77b280f8dfa8e53010b11b";
  }

  static const char* value(const ::ublox::GlonassEphemeris_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc574661def77b280ULL;
  static const uint64_t static_value2 = 0xf8dfa8e53010b11bULL;
};

template<class ContainerAllocator>
struct DataType< ::ublox::GlonassEphemeris_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ublox/GlonassEphemeris";
  }

  static const char* value(const ::ublox::GlonassEphemeris_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ublox::GlonassEphemeris_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"\n"
"uint8 sat 					  # Satellite ID (within Constellation)\n"
"uint8 gnssID				  # Satellite ID (within Constellation)\n"
"\n"
"uint8 GNSSID_GPS = 0\n"
"uint8 GNSSID_SBAS = 1\n"
"uint8 GNSSID_GALILEO = 2\n"
"uint8 GNSSID_BEIDOU = 3\n"
"uint8 GNSSID_QZSS = 5\n"
"uint8 GNSSID_GLONASS = 6\n"
"\n"
"time toe        	# epoch of epherides (UTC inc. leap-seconds)\n"
"time tof            # message frame time (UTC inc. leap-seconds)\n"
"\n"
"int32 iode          # IODE (0-6 bit of tb field)\n"
"int32 frq           # satellite frequency number\n"
"int32 svh			# satellite health\n"
"int32 sva			# satellite accuracy (ura)\n"
"int32 age   		# age of operation\n"
"float64[3] pos      # satellite position (ecef) (m)\n"
"float64[3] vel      # satellite velocity (ecef) (m/s)\n"
"float64[3] acc      # satellite acceleration (ecef) (m/s^2)\n"
"float64 taun		# SV clock bias (s)\n"
"float64 gamn   	  	# relative freq bias\n"
"float64 dtaun       # delay between L1 and L2 (s)\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::ublox::GlonassEphemeris_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ublox::GlonassEphemeris_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.sat);
      stream.next(m.gnssID);
      stream.next(m.toe);
      stream.next(m.tof);
      stream.next(m.iode);
      stream.next(m.frq);
      stream.next(m.svh);
      stream.next(m.sva);
      stream.next(m.age);
      stream.next(m.pos);
      stream.next(m.vel);
      stream.next(m.acc);
      stream.next(m.taun);
      stream.next(m.gamn);
      stream.next(m.dtaun);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GlonassEphemeris_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ublox::GlonassEphemeris_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ublox::GlonassEphemeris_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "sat: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.sat);
    s << indent << "gnssID: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.gnssID);
    s << indent << "toe: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.toe);
    s << indent << "tof: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.tof);
    s << indent << "iode: ";
    Printer<int32_t>::stream(s, indent + "  ", v.iode);
    s << indent << "frq: ";
    Printer<int32_t>::stream(s, indent + "  ", v.frq);
    s << indent << "svh: ";
    Printer<int32_t>::stream(s, indent + "  ", v.svh);
    s << indent << "sva: ";
    Printer<int32_t>::stream(s, indent + "  ", v.sva);
    s << indent << "age: ";
    Printer<int32_t>::stream(s, indent + "  ", v.age);
    s << indent << "pos[]" << std::endl;
    for (size_t i = 0; i < v.pos.size(); ++i)
    {
      s << indent << "  pos[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.pos[i]);
    }
    s << indent << "vel[]" << std::endl;
    for (size_t i = 0; i < v.vel.size(); ++i)
    {
      s << indent << "  vel[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.vel[i]);
    }
    s << indent << "acc[]" << std::endl;
    for (size_t i = 0; i < v.acc.size(); ++i)
    {
      s << indent << "  acc[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.acc[i]);
    }
    s << indent << "taun: ";
    Printer<double>::stream(s, indent + "  ", v.taun);
    s << indent << "gamn: ";
    Printer<double>::stream(s, indent + "  ", v.gamn);
    s << indent << "dtaun: ";
    Printer<double>::stream(s, indent + "  ", v.dtaun);
  }
};

} // namespace message_operations
} // namespace ros

#endif // UBLOX_MESSAGE_GLONASSEPHEMERIS_H
